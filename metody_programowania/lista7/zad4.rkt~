#lang racket


( parametric->/c [ a b ] (- > a b a ) )
( parametric->/c [ a b c ] (- > (- > a b c ) (- > a b ) a c ) )
( parametric->/c [ a b c ] (- > (- > b c ) (- > a b ) (- > a c ) ) )
( parametric->/c [ a ] (- > (- > (- > a a ) a ) a ) ) ; wystapienie negatywne




(define/contract (f1 a b)
  (parametric->/c [ a b ] (-> a b a ) )
   a)

(define/contract (f2 f g a)
  (parametric->/c [a b c] (-> (-> a b c ) (-> a b ) a c ))
  (f a (g a)))

(define/contract (f3 f g )
  ( parametric->/c [a b c] (-> (-> b c ) (-> a b ) (-> a c )))
  (lambda (x) (g (f x))))





(define (f x)
  (* 2 x))
(define (g x)
  (* x x))

(f1 '(l, o) 3)
(f2 + g 5) ;(5 + (5 * 5))= 30
(f3 f g) ; x -> (2x)^2



